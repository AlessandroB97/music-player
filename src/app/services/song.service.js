"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var song_1 = require("../models/song");
var Sqlite = require("nativescript-sqlite");
var fileSystemModule = require("tns-core-modules/file-system");
var file_system_1 = require("tns-core-modules/file-system");
var music_metadata_1 = require("music-metadata");
var platform_1 = require("tns-core-modules/platform");
var buffer_1 = require("buffer");
var imageSource = require("tns-core-modules/image-source");
var SongService = /** @class */ (function () {
    function SongService() {
        this.songs = [];
        // mmr: MediaMetadataRetriever;
        this.img = new imageSource.ImageSource();
        // getMetadata(entity :fileSystemModule.FileSystemEntity) {
        //     //Set the data source for the media file
        //     console.log(entity.path);
        //     this.mmr.setDataSource(entity.path);
        //     //Get the Embedded Picture(Bitmap)
        //     // this.mmr.getEmbeddedPicture()
        //     // .then((args) => {
        //     //     if(args) {
        //     //         this.img.setNativeSource(args);
        //     //     console.log("IMMAGINE: "+ this.img.toBase64String("jpg"));
        //     //     }
        //     // })
        //     // .catch((ex) => {
        //     //     //Do something else
        //     //     console.log("Failed to set ImageSource..." + ex);
        //     // });
        //     //Get all the metadata
        //     this.mmr.extractAllMetadata()
        //     .then((args) => {
        //         // if(args._mediaMetadataRetriever.getEmbeddedPicture()){
        //         //     this.img.setNativeSource(args.image);
        //         // }
        //         this.img.setNativeSource(args.image);
        //         this.insertDB( 
        //         args.title? args.title : "",
        //         args.artist? args.artist : "",
        //         this.img? "data:image/jpg;base64," +this.img.toBase64String("png") : "",//"data:image/jpeg;base64," + args.picture[0].data.toString('base64') : "",
        //         args.album? args.album : "",
        //         args.genre? args.genre : "",
        //         args.cdtracknumber? args.cdtracknumber : "",
        //         args.year? args.year.toString() : "",
        //         entity.path
        //         );
        //     });
        // }
    }
    SongService.prototype.initDb = function () {
        var songFolder;
        if (platform_1.isAndroid) {
            var androidPath = android.os.Environment.getExternalStorageDirectory().getAbsolutePath();
            songFolder = file_system_1.Folder.fromPath(fileSystemModule.path.join(androidPath, "Music/Prova")); //Folder.fromPath("sdcard/Music/Jesto/Justin/");
        }
        if (platform_1.isIOS) {
            songFolder = file_system_1.knownFolders.ios.music();
        }
        (new Sqlite("songs.db")).then(function (db) {
            db.execSQL("DROP TABLE IF EXISTS songs");
            db.execSQL("CREATE TABLE IF NOT EXISTS songs (id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT, artist TEXT, image TEXT, album TEXT, genre TEXT, track TEXT, year TEXT, path TEXT)").then(function (id) {
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
        this.checkSongs(songFolder);
    };
    SongService.prototype.checkSongs = function (songFolder) {
        var _this = this;
        var array = [];
        songFolder.getEntities()
            .then(function (entities) {
            // entities is array with the document's files and folders.
            entities.forEach(function (entity) {
                if (fileSystemModule.Folder.exists(entity.path)) {
                    array = array.concat(_this.checkSongs(fileSystemModule.Folder.fromPath(entity.path)));
                }
                else if (!entity.path.endsWith("db")) {
                    var tags;
                    var extension = entity.path.slice((entity.path.lastIndexOf(".") - 1 >>> 0) + 2);
                    console.log("-----------------");
                    console.log("path: " + entity.path);
                    console.log("ESTENSIONE: " + extension);
                    switch (extension) {
                        case "mp2":
                        case "mp3":
                        case "m2a":
                            console.log("AGGIUNGO COME mpeg");
                            _this.insertSong(entity, "mpeg");
                            break;
                        case "ape":
                            console.log("AGGIUNGO COME ape");
                            _this.insertSong(entity, "apev2");
                            break;
                        case "aac":
                        case "mp4":
                        case "m4a":
                        case "m4b":
                        case "m4pa":
                        case "m4v":
                        case "m4r":
                        case "3gp":
                            console.log("AGGIUNGO COME mp4");
                            _this.insertSong(entity, "mp4");
                            break;
                        case "wma":
                        case "wmv":
                        case "asf":
                            console.log("AGGIUNGO COME asf");
                            _this.insertSong(entity, "asf");
                            break;
                        case "flac":
                            console.log("AGGIUNGO COME flac");
                            _this.insertSong(entity, "flac");
                            break;
                        case "ogg":
                        case "ogv":
                        case "oga":
                        case "ogm":
                        case "ogx":
                        case "opus": // recommended filename extension for Ogg Opus
                        case "spx": // recommended filename extension for Ogg Speex
                            console.log("AGGIUNGO COME ogg");
                            _this.insertSong(entity, "ogg");
                            break;
                        case "aif":
                        case "aiff":
                        case "aifc":
                            console.log("AGGIUNGO COME aiff");
                            _this.insertSong(entity, "aiff");
                            break;
                        case "wav":
                            console.log("AGGIUNGO COME riff");
                            _this.insertSong(entity, "riff");
                            break;
                        case "wv":
                        case "wvp":
                            console.log("AGGIUNGO COME wavpack");
                            _this.insertSong(entity, "wavpack");
                            break;
                        case "mpc":
                            console.log("AGGIUNGO COME musepack");
                            _this.insertSong(entity, "musepack");
                            break;
                    }
                }
            });
            _this.fetch();
        }).catch(function (err) {
            console.log("ERRORE: " + err.stack);
        });
    };
    SongService.prototype.insertSong = function (entity, format) {
        var _this = this;
        var file = fileSystemModule.File.fromPath(entity.path);
        console.log("INIZIO BUff");
        var buff = buffer_1.Buffer.from(file.readSync());
        console.log(buff);
        // readFile(file.path, "utf8", function(err, data) {  
        //     if (err) throw err;
        //     buff =data;
        // });
        // this.mmr = new MediaMetadataRetriever()
        // this.getMetadata(entity);
        music_metadata_1.parseBuffer(buff, "audio/" + format, { duration: true, fileSize: file.size }).then(function (metadata) {
            // console.log(metadata.common.title);
            _this.insertDB(metadata.common.title ? metadata.common.title : "", metadata.common.artist ? metadata.common.artist : "", metadata.common.picture ? "data:image/jpeg;base64," + metadata.common.picture[0].data.toString('base64') : "", metadata.common.album ? metadata.common.album : "", metadata.common.genre ? metadata.common.genre[0] : "", metadata.common.track.no ? metadata.common.track.no.toString() : "", metadata.common.year ? metadata.common.year.toString() : "", entity.path);
        });
        console.log("INSERIMENTO COMPLETATO!");
    };
    SongService.prototype.insertDB = function (title, artist, image, album, genre, track, year, path) {
        (new Sqlite("songs.db")).then(function (db) {
            db.execSQL("INSERT INTO songs (title, artist, image, album, genre, track, year, path) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", [title, artist, image, album, genre, track, year, path]).then(function (id) {
            }, function (error) {
                console.log("INSERT ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
    };
    SongService.prototype.fetch = function () {
        var _this = this;
        (new Sqlite("songs.db")).then(function (db) {
            db.all("SELECT * FROM songs").then(function (rows) {
                _this.songs = [];
                for (var row in rows) {
                    var song = new song_1.Song;
                    song.Title = rows[row][1];
                    song.Artist = rows[row][2];
                    song.Image = rows[row][3];
                    song.Album = rows[row][4];
                    song.Genre = rows[row][5];
                    song.Track = rows[row][6];
                    song.Year = rows[row][7];
                    song.Path = rows[row][8];
                    _this.songs.push(song);
                }
            }, function (error) {
                console.log("SELECT ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
    };
    SongService = __decorate([
        core_1.Injectable()
    ], SongService);
    return SongService;
}());
exports.SongService = SongService;
//# sourceMappingURL=data:application/json;base64,